generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  slug               String         @unique
  description        String
  basePrice          Decimal        @db.Decimal(8, 2)
  imageUrls          String[]
  categoryId         String
  category           Category       @relation(fields: [categoryId], references: [id])
  discountPercentage Int            @default(0)
  status             ProductStatus  @default(ACTIVE)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  orderProduct       OrderProduct[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

model OrderProduct {
  id                 String  @id @default(uuid())
  productId          String
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  basePrice          Decimal @db.Decimal(8, 2)
  discountPercentage Int     @default(0)
  quantity           Int
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
  ON_ROUTE
  DELIVERED
  CANCELLED
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      OrderProduct[]
  totalPrice    Decimal        @db.Decimal(10, 2)
  subtotalPrice Decimal        @db.Decimal(10, 2)
  deliveryFee   Decimal        @db.Decimal(10, 2)
  discountValue Decimal        @db.Decimal(10, 2)
  status        OrderStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}
